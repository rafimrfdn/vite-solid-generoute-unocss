import { createSignal, createEffect, Show } from "solid-js";

// Sample Questions (You can replace this with a JSON fetch logic)
const quizData = [
  {
    id: 1,
    question: "What is SolidJS?",
    options: ["A framework", "A library", "A language", "None of the above"],
    answer: "A framework",
  },
  {
    id: 2,
    question: "What language does SolidJS use?",
    options: ["Python", "JavaScript", "C++", "Ruby"],
    answer: "JavaScript",
  },
  {
    id: 3,
    question: "What is the main feature of SolidJS?",
    options: [
      "Virtual DOM",
      "Reactive State Management",
      "No state management",
      "None of the above",
    ],
    answer: "Reactive State Management",
  },
];

export default function QuizApp() {
  // State to track the current question index
  const [currentQuestionIndex, setCurrentQuestionIndex] = createSignal(0);

  // State to store user's answers
  const [userAnswers, setUserAnswers] = createSignal([]);

  // State to track if the quiz is completed
  const [isQuizCompleted, setIsQuizCompleted] = createSignal(false);

  // Current question based on the index
  const currentQuestion = () => quizData[currentQuestionIndex()];

  // Handle option selection
  function handleOptionSelect(option) {
    const answers = [...userAnswers()];
    answers[currentQuestionIndex()] = option; // Store the answer for the current question
    setUserAnswers(answers);
  }

  // Move to the next question
  function handleNext() {
    if (currentQuestionIndex() < quizData.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex() + 1);
    } else {
      setIsQuizCompleted(true); // Mark the quiz as completed
    }
  }

  // Calculate score
  const calculateScore = () => {
    return userAnswers().filter(
      (answer, index) => answer === quizData[index].answer
    ).length;
  };

  return (
    <div>
      <h1>Multiple Choice Quiz App</h1>
      <Show
        when={!isQuizCompleted()}
        fallback={
          <div>
            <h2>Quiz Completed!</h2>
            <p>Your Score: {calculateScore()} / {quizData.length}</p>
          </div>
        }
      >
        <div>
          <h2>Question {currentQuestionIndex() + 1} of {quizData.length}</h2>
          <p>{currentQuestion().question}</p>
          <div>
            {currentQuestion().options.map((option) => (
              <div>
                <label>
                  <input
                    type="radio"
                    name={`question-${currentQuestionIndex()}`}
                    value={option}
                    checked={userAnswers()[currentQuestionIndex()] === option}
                    onChange={() => handleOptionSelect(option)}
                  />
                  {option}
                </label>
              </div>
            ))}
          </div>
          <button
            onClick={handleNext}
            disabled={!userAnswers()[currentQuestionIndex()]} // Disable if no answer selected
          >
            {currentQuestionIndex() === quizData.length - 1
              ? "Finish Quiz"
              : "Next"}
          </button>
        </div>
      </Show>
    </div>
  );
}
